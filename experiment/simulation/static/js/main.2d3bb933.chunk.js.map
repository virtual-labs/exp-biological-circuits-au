{"version":3,"sources":["adexstate.js","Amritalogo.png","vlablogo2.jpg","App.js","reportWebVitals.js","index.js"],"names":["adexstate","adex_modes_list","default","C","el","del","a","vr","gl","vt","tw","b","T","I","fs","rs","tc","ib","rz","ch","adex_params","adex_param_list","adex_output","V","w","T_steps","LineChart","Recharts","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","AdexNeuron","state","console","log","this","dt","Math","exp","SimpleSynapse","nNeurons","upI","ni","Array","fill","map","wi","App","useState","setState","modesWindowState","setmodesWindowState","setnNeurons","neurons","setNeurons","plotData","setplotData","modelParameterWindowState","setmodelParameterWindowState","networkParametersWindowState","setnetworkParametersWindowState","setRawData","changeState","name","value","parseFloat","className","style","margin","width","height","Heading","align","Alignment","LEFT","fluid","md","data","horizontal","vertical","dataKey","nv","type","stroke","dot","onClick","text","isOpen","small","onChange","e","target","disabled","Object","keys","m","i","mode","marginRight","neu","_","range","n","createNeurons","syn","nV","nw","run","forEach","no","push","plot_data","t","ti","tmp_inst","simRun","paddingRight","src","amritalogo","alt","vlablogo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2d3bb933.chunk.js","sourcesContent":["const adexstate = {\r\n    adex_modes_list:{\r\n        default:{\r\n            C : 281,\r\n            el : -70.6,\r\n            del : 2,\r\n            a : 4,\r\n            vr : -54,\r\n            gl : 30,\r\n            vt : -50.4,\r\n            tw : 144,\r\n            b : 0.0805,\r\n            T : 100,\r\n            I : 20,\r\n        },\r\n        fs:{\r\n                C : 200,\r\n                el : -70,\r\n                del : 2,\r\n                a : 2,\r\n                vr : -58,\r\n                gl : 12,\r\n                vt : -50,\r\n                tw : 300,\r\n                b : 60,\r\n        },\r\n        rs:{\r\n                C : 281,\r\n                el : -70.6,\r\n                del :2,\r\n                a : 4,\r\n                vr : -54,\r\n                gl : 30,\r\n                vt : -50.4,\r\n                tw : 144,\r\n                b : 0.0805,\r\n        },\r\n        tc:{\r\n            C : 130,\r\n            el : -58,\r\n            del : 2,\r\n            a : 4,\r\n            vr : -50,\r\n            gl : 18,\r\n            vt : -50,\r\n            tw : 150,\r\n            b : 120,\r\n        },\r\n        ib:{\r\n            C : 104,\r\n            el : -65,\r\n            del : 5.5,\r\n            a : -0.8,\r\n            vr : -53,\r\n            gl : 43,\r\n            vt : -52,\r\n            tw : 88,\r\n            b : 65,\r\n        },\r\n        rz:{\r\n                C : 200,\r\n                el : -58,\r\n                del : 2,\r\n                a : 2,\r\n                vr : -46,\r\n                gl : 10,\r\n                vt : -50,\r\n                tw : 120,\r\n                b : 100,\r\n            },\r\n        ch:{\r\n            C : 200,\r\n            el : -70,\r\n            del : 0.8,\r\n            a : 2,\r\n            vr : -58,\r\n            gl : 10,\r\n            vt : -50,\r\n            tw : 30,\r\n            b : 0,\r\n        }\r\n    },\r\n    adex_params:{\r\n        C : 281,\r\n        el : -70.6,\r\n        del : 2,\r\n        a : 4,\r\n        vr : -54,\r\n        gl : 30,\r\n        vt : -50.4,\r\n        tw : 144,\r\n        b : 0.0805,\r\n        T : 100,\r\n        I : 20,\r\n    },\r\n    adex_param_list : [[\"C\", 'gl'], ['el', 'vt'], ['del', 'tw'], ['b', 'vr'], ['a', ''] , ['T', \"I\"] ],\r\n    adex_output : {\r\n        V: [],\r\n        w: [],\r\n        T_steps: []\r\n    }\r\n\r\n}\r\n\r\nexport default adexstate;","export default __webpack_public_path__ + \"static/media/Amritalogo.74a0debe.png\";","export default __webpack_public_path__ + \"static/media/vlablogo2.00a678a6.jpg\";","import { useState } from 'react';\r\nimport { Grid, Row, Col } from 'react-flexbox-grid';\r\nimport * as Recharts from \"recharts/umd/Recharts\";\r\nimport { Button, Card, Label, InputGroup, Divider, Collapse } from '@blueprintjs/core';\r\nimport { Navbar, Alignment } from '@blueprintjs/core';\r\nimport adexstate from './adexstate';\r\n\r\nimport _ from 'underscore';\r\nimport './App.css';\r\nimport { DIVIDER } from '@blueprintjs/core/lib/esm/common/classes';\r\nimport amritalogo from './Amritalogo.png';\r\nimport vlablogo from './vlablogo2.jpg'\r\n\r\n// test \r\nconst LineChart = Recharts.LineChart\r\nconst Line = Recharts.Line\r\nconst Cell = Recharts.Cell\r\nconst XAxis = Recharts.XAxis\r\nconst YAxis = Recharts.YAxis\r\nconst CartesianGrid = Recharts.CartesianGrid\r\nconst Tooltip = Recharts.Tooltip\r\nconst Legend = Recharts.Legend\r\nconst ResponsiveContainer = Recharts.ResponsiveContainer;\r\n\r\nclass AdexNeuron {\r\n  constructor (state) {\r\n    console.log(state)\r\n    this.C = state.C;\r\n    this.el = state.el;\r\n    this.del = state.del;\r\n    this.a = state.a;\r\n    this.vr = state.vr;\r\n    this.gl = state.gl;\r\n    this.vt = state.vt;\r\n    this.tw = state.tw;\r\n    this.b = state.b;\r\n    this.dt = 0.1;\r\n\r\n    // this.T = 100;\r\n    // this.I = 20;\r\n  }\r\n\r\n  run(V,w,I){\r\n    const dV = this.dt * (this.gl * (V - this.el) + (this.gl * this.del * Math.exp((V - this.vt) / this.del)) - w + I) / this.C;\r\n    const dw = this.dt * ((this.a * (V - this.el) - w) / this.tw);\r\n    return [dV, dw]\r\n  }\r\n}\r\n\r\nclass SimpleSynapse{\r\n  constructor(nNeurons, I){\r\n    this.I = I\r\n    this.w = new Array(nNeurons).fill(0).map( (w, wi) => wi === 0 ? I : 5 )\r\n  }\r\n\r\n\r\n  // calI = (ni) => ni === 0 ? this.w[ni] : prev_nV === 0 ? this.inW(ni) : this.w[ni] \r\n\r\n  upI = (ni) => this.w[ni] = this.w[ni]+ (5+ni+1)\r\n}\r\n\r\n\r\nfunction App() {\r\n    const [state, setState] = useState(adexstate.adex_modes_list.default);\r\n    const [modesWindowState, setmodesWindowState] = useState('default');\r\n\r\n    const [ nNeurons, setnNeurons ] = useState(5);\r\n    const [neurons, setNeurons] = useState([]);\r\n    const [plotData, setplotData] = useState([]);\r\n    const [AVPData, setAVPData] = useState([]);\r\n    const [modelParameterWindowState, setmodelParameterWindowState] = useState(true);\r\n    const [networkParametersWindowState, setnetworkParametersWindowState] = useState(false);\r\n\r\n    const [rawData, setRawData ] = useState([]);\r\n\r\n    const changeMode = (mode) => {\r\n      console.log(adexstate.adex_modes_list[mode])\r\n      setState(adexstate.adex_modes_list[mode])\r\n    }\r\n\r\n\r\n    const changeState = (name, value) => {\r\n      setState({\r\n        ...state,\r\n        [name]: parseFloat(value),\r\n      })\r\n    }\r\n    const changenNeurons = (value) => {\r\n      setnNeurons(parseFloat(value));\r\n    }\r\n\r\n\r\n    const createNeurons = () => {\r\n      const neu = _.range(nNeurons).map(n => new AdexNeuron(state));\r\n      // const syn = _.range(nNeurons).map((n,i) => [0])\r\n      // nV = _.range(nNeurons).map((n,i) => [neu[i].el])\r\n      // nw = _.range(nNeurons).map(n => [0])\r\n      setNeurons(neu);\r\n    }\r\n\r\n    const simRun = () => {\r\n      const T = 500;\r\n      const dt = 0.1;\r\n      const nSteps = T / dt;\r\n      const I = new Array(nSteps).fill(0); //generateCurrent(3,dt); //input current\r\n\r\n      const syn =  new SimpleSynapse(nNeurons, 20);\r\n\r\n      let nV = _.range(nNeurons).map((n,i) => [neurons[i].el])\r\n      let nw = _.range(nNeurons).map(n => [0])\r\n      const fired_neurons = [];\r\n\r\n      // let dV = 0;\r\n      // let dw = 0;\r\n      let T_steps = [0];\r\n\r\n      for(let i =0; i< nSteps; i++){\r\n        const nouts = neurons.map((n,ni) => n.run(nV[ni][i], nw[ni][i], syn.w[ni] ));\r\n        nouts.forEach((no,ni)=> {nV[ni].push(nV[ni][i]+no[0]); nw[ni].push(nw[ni][i]+no[1])})\r\n\r\n        T_steps.push(T_steps[i]+dt)\r\n        nV.forEach( (nv, ni) => nv[i+1] > 0 ? ( syn.upI(ni), nV[ni][i] = 0, nw[ni][i+1]= nw[ni][i]+neurons[ni].b, nV[ni][i+1]= neurons[ni].el ): (0) )\r\n\r\n        // fired_neurons.push(nouts.map(v=> v[0]=== 0 ? 1 : 0))\r\n\r\n      }\r\n\r\n      // setplotData(T_steps.map((t,ti)=> nV.map((nv,ni) => ({ 'time': t, 'v': nv[ti], 'w': nw[ni][ti] }))));\r\n      // setplotData(nV.map((nv, ni) => T_steps.map((t, ti) => ({ 'time': t, 'v': nv[ti], 'w': nw[ni][ti] })) )[0])\r\n      let plot_data = []\r\n      setRawData(nV);\r\n      T_steps.forEach((t, ti) => {\r\n        let tmp_inst = {}\r\n        tmp_inst['t'] = t;\r\n        nV.forEach((nv, ni) => tmp_inst['n'+ni] = nv[ti])\r\n        plot_data.push(tmp_inst);\r\n      })\r\n      setplotData(plot_data)\r\n\r\n    }\r\n\r\n\r\n  return (\r\n    <div className=\"App bp3-dark\" style={{ margin: \"0 auto\", width: '80%', height:'100%' }}>\r\n      <Navbar>\r\n        <Navbar.Heading align={Alignment.LEFT} >Amrita Neuron Network Simulator</Navbar.Heading>\r\n      </Navbar>\r\n      <Grid fluid>\r\n          <Card>\r\n          <Row>\r\n          <Col md={8}>\r\n          <ResponsiveContainer >\r\n          <LineChart  data={plotData}> \r\n                <CartesianGrid horizontal={false} vertical={false} />\r\n                <XAxis dataKey=\"time\" />\r\n                <YAxis />\r\n                <Tooltip />\r\n                <Legend />\r\n                {\r\n                  neurons.map((nv,ni)=> <Line type=\"monotone\" dataKey={\"n\"+ni} stroke=\"#8884d8\" dot={false} /> )\r\n                }\r\n            </LineChart>\r\n            </ResponsiveContainer>\r\n\r\n          </Col>\r\n          \r\n          <Col md={4}>\r\n            <Card>\r\n              <Button onClick={()=>setmodelParameterWindowState(!modelParameterWindowState)}  text='Model Parameters'/>\r\n              <Collapse isOpen={modelParameterWindowState}>\r\n              <Card>\r\n                                    <Grid>\r\n                                        <Row>\r\n                                            <Col md={3}><Label>C :</Label></Col>\r\n                                            <Col md={3}>\r\n                                                <InputGroup  fill={false} small  value={state.C} onChange={(e)=> changeState('C', e.target.value)} />\r\n                                            </Col>\r\n                                            <Col md={3}><Label>T : </Label></Col>\r\n                                            <Col md={3}><InputGroup  fill={false} small value={state.T} onChange={(e)=> changeState('T', e.target.value)} /></Col>\r\n                                        </Row>\r\n                                    </Grid>\r\n                                    <Grid>\r\n                                        <Row>\r\n                                            <Col md={3}><Label>gl :</Label></Col>\r\n                                            <Col md={3}>\r\n                                                <InputGroup  fill={false} small value={state.gl} onChange={(e)=> changeState('gl', e.target.value)} />\r\n                                            </Col>\r\n                                            <Col md={3}><Label>el : </Label></Col>\r\n                                            <Col md={3}><InputGroup  fill={false} small value={state.el} onChange={(e)=> changeState('el', e.target.value)} /></Col>\r\n                                        </Row>\r\n                                    </Grid>\r\n                                    <Grid>\r\n                                        <Row>\r\n                                            <Col md={3}><Label>vt :</Label></Col>\r\n                                            <Col md={3}>\r\n                                                <InputGroup  fill={false} small value={state.vt} onChange={(e)=> changeState('vt', e.target.value)} />\r\n                                            </Col>\r\n                                            <Col md={3}><Label>del : </Label></Col>\r\n                                            <Col md={3}><InputGroup  fill={false} small value={state.del} onChange={(e)=> changeState('del', e.target.value)} /></Col>\r\n                                        </Row>\r\n                                    </Grid>\r\n                                    <Grid>\r\n                                        <Row>\r\n                                            <Col md={3}><Label>tw :</Label></Col>\r\n                                            <Col md={3}>\r\n                                                <InputGroup  fill={false} small value={state.tw} onChange={(e)=> changeState('tw', e.target.value)} />\r\n                                            </Col>\r\n                                            <Col md={3}><Label>vr : </Label></Col>\r\n                                            <Col md={3}><InputGroup  fill={false} small  value={state.vr} onChange={(e)=> changeState('vr', e.target.value)} /></Col>\r\n                                        </Row>\r\n                                    </Grid>\r\n                                    <Grid>\r\n                                        <Row>\r\n                                            <Col md={3}><Label>a :</Label></Col>\r\n                                            <Col md={3}>\r\n                                                <InputGroup  fill={false} small value={state.a} onChange={(e)=> changeState('a', e.target.value)} />\r\n                                            </Col>\r\n                                            <Col md={3}><Label>b : </Label></Col>\r\n                                            <Col md={3}><InputGroup  fill={false} small value={state.b} onChange={(e)=> changeState('b', e.target.value)} /></Col>\r\n                                        </Row>\r\n                                    </Grid>\r\n                                    <Grid>\r\n                                        <Row>\r\n                                            <Col md={3}><Label>I :</Label></Col>\r\n                                            <Col md={3}>\r\n                                                <InputGroup  fill={false} small value={state.I} onChange={(e)=> changeState('I', e.target.value)} />\r\n                                            </Col>\r\n                                            <Col md={3}><Label> </Label></Col>\r\n                                            <Col md={3}><InputGroup  fill={false} small  disabled/></Col>\r\n                                        </Row>\r\n                                    </Grid>\r\n                                </Card>\r\n                  \r\n              </Collapse>\r\n              <Divider />\r\n\r\n              <Card>\r\n        <Button onClick={()=> setmodesWindowState(!modesWindowState)} text='Modes' />\r\n        <Collapse isOpen={modesWindowState}>\r\n            <Card>\r\n                <div>\r\n                    {Object.keys(adexstate.adex_modes_list).map((m,i) => (<Button onClick={()=> changeMode(m)} style={{ marginRight: '8px' }}>{m}</Button>))}\r\n                </div>\r\n\r\n            </Card>\r\n        </Collapse>\r\n\r\n        <Divider vertical />\r\n              <Button onClick={()=> setnetworkParametersWindowState(!networkParametersWindowState)}> Network Parameters </Button>\r\n              <Collapse isOpen={networkParametersWindowState}>\r\n              <Grid>\r\n                <Row>\r\n                    <Col md={3}><Label>Number of Neurons :</Label></Col>\r\n                    <Col md={3}>\r\n                        <InputGroup fill={false} small  value={nNeurons} onChange={(e)=> changenNeurons(e.target.value)} />\r\n                    </Col>\r\n                </Row>\r\n              </Grid>\r\n\r\n\r\n              </Collapse>\r\n            </Card>\r\n\r\n            <Divider />\r\n\r\n              <Button onClick={()=> createNeurons()} >Add Neurons</Button>\r\n              <Button onClick={()=> simRun()} >Run Sim</Button>\r\n            </Card>\r\n\r\n          </Col>\r\n        </Row>\r\n        <img style ={{ width: '200px', height: '50px', paddingRight: '10px' }} src={amritalogo} alt=\"Amrita\"/>\r\n          <img style ={{ width: '200px', height: '50px'}} src={vlablogo} alt=\"Amrita\"/>\r\n        </Card>\r\n      </Grid>\r\n\r\n      \r\n\r\n      {/* <AdexTensor /> */}\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}